{"version":3,"sources":["components/Currency/Currency.js","reducer/actions.js","reducer/reducer.js","App.js","index.js"],"names":["Currency","rates","amount","setAmount","selectedOption","dispatch","type","value","onChange","map","rate","key","curName","ACTIONS","reducer","state","action","currency1","payload","currency","currency2","amount1","parseFloat","newAmount","toFixed","amount2","App","useReducer","useState","setRates","date","setDate","useEffect","fetch","then","res","json","apiRates","push","currencyRate1","filter","currencyRate2","className","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc2ba3da.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Currency.css\";\n\nconst Currency = ({ rates, amount, setAmount, selectedOption, dispatch }) => {\n  return (\n    <div>\n      <input type=\"number\" value={amount} onChange={dispatch} />\n      <select value={selectedOption} onChange={setAmount}>\n        {rates.map((rate) => (\n          <option key={rate.curName} value={rate.curName}>\n            {rate.curName}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default Currency;\n","export const ACTIONS = {\n  UPDATE_CURRENCY1_NAME: \"update_currency1_name\",\n  UPDATE_CURRENCY2_NAME: \"update_currency2_name\",\n  UPDATE_AMOUNT1: \"update_amount1\",\n  UPDATE_AMOUNT2: \"update_amount2\",\n};\n","import { ACTIONS } from \"./actions\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.UPDATE_CURRENCY1_NAME:\n      return { ...state, currency1: action.payload.currency };\n    case ACTIONS.UPDATE_CURRENCY2_NAME:\n      return { ...state, currency2: action.payload.currency };\n    case ACTIONS.UPDATE_AMOUNT1:\n      return {\n        ...state,\n        amount1: parseFloat(action.payload.newAmount).toFixed(3),\n      };\n    case ACTIONS.UPDATE_AMOUNT2:\n      return {\n        ...state,\n        amount2: parseFloat(action.payload.newAmount).toFixed(3),\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useEffect, useState, useReducer } from \"react\";\nimport Currency from \"./components/Currency/Currency\";\nimport { reducer } from \"./reducer/reducer\";\nimport { ACTIONS } from \"./reducer/actions\";\nimport \"./App.css\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, {\n    currency1: \"\",\n    amount1: 1,\n    currency2: \"\",\n    amount2: 1,\n  });\n  const [rates, setRates] = useState([]);\n  const [date, setDate] = useState(\"\");\n\n  const updateAmount1 = (e) => {\n    dispatch({\n      type: ACTIONS.UPDATE_AMOUNT1,\n      payload: {\n        newAmount: e.target.value,\n      },\n    });\n    const currencyRate1 = rates.filter(\n      (rate) => state.currency1 === rate.curName\n    );\n    const currencyRate2 = rates.filter(\n      (rate) => state.currency2 === rate.curName\n    );\n    const newAmount =\n      (currencyRate1[0].key / currencyRate2[0].key) * +e.target.value;\n    dispatch({\n      type: ACTIONS.UPDATE_AMOUNT2,\n      payload: { newAmount: newAmount },\n    });\n  };\n\n  const updateAmount2 = (e) => {\n    dispatch({\n      type: ACTIONS.UPDATE_AMOUNT2,\n      payload: {\n        newAmount: e.target.value,\n      },\n    });\n    const currencyRate1 = rates.filter(\n      (rate) => state.currency1 === rate.curName\n    );\n    const currencyRate2 = rates.filter(\n      (rate) => state.currency2 === rate.curName\n    );\n    const newAmount =\n      (currencyRate2[0].key / currencyRate1[0].key) * +e.target.value;\n    dispatch({\n      type: ACTIONS.UPDATE_AMOUNT1,\n      payload: { newAmount: newAmount },\n    });\n  };\n\n  const setAmount1 = (e) => {\n    dispatch({\n      type: ACTIONS.UPDATE_CURRENCY1_NAME,\n      payload: { currency: e.target.value },\n    });\n\n    const currencyRate1 = rates.filter(\n      (rate) => e.target.value === rate.curName\n    );\n    const currencyRate2 = rates.filter(\n      (rate) => state.currency2 === rate.curName\n    );\n    const newAmount =\n      (currencyRate1[0].key / currencyRate2[0].key) * state.amount1;\n\n    dispatch({\n      type: ACTIONS.UPDATE_AMOUNT2,\n      payload: { newAmount: newAmount },\n    });\n  };\n\n  const setAmount2 = (e) => {\n    dispatch({\n      type: ACTIONS.UPDATE_CURRENCY2_NAME,\n      payload: { currency: e.target.value },\n    });\n\n    const currencyRate1 = rates.filter(\n      (rate) => state.currency1 === rate.curName\n    );\n    const currencyRate2 = rates.filter(\n      (rate) => e.target.value === rate.curName\n    );\n    const newAmount =\n      (currencyRate2[0].key / currencyRate1[0].key) * state.amount2;\n\n    dispatch({\n      type: ACTIONS.UPDATE_AMOUNT1,\n      payload: { newAmount: newAmount },\n    });\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.exchangeratesapi.io/latest\")\n      .then((res) => res.json())\n      .then((res) => {\n        const apiRates = [];\n        for (const key in res.rates) {\n          apiRates.push({ curName: key, key: res.rates[key] });\n        }\n        setRates(apiRates);\n        setDate(res.date);\n        dispatch({\n          type: ACTIONS.UPDATE_CURRENCY1_NAME,\n          payload: { currency: apiRates[26].curName },\n        });\n        dispatch({\n          type: ACTIONS.UPDATE_CURRENCY2_NAME,\n          payload: { currency: apiRates[29].curName },\n        });\n\n        const currencyRate1 = apiRates.filter(\n          (rate) => apiRates[0].curName === rate.curName\n        );\n        const currencyRate2 = apiRates.filter(\n          (rate) => apiRates[1].curName === rate.curName\n        );\n\n        const newAmount = currencyRate1[0].key / currencyRate2[0].key;\n        dispatch({\n          type: ACTIONS.UPDATE_AMOUNT2,\n          payload: { newAmount: newAmount },\n        });\n      });\n  }, []);\n  return (\n    <>\n      <header>\n        <h1>currency converter</h1>\n        <hr />\n      </header>\n      <main>\n        <div className=\"data\">\n          <p className=\"from\">\n            {parseFloat(state.amount1)}\n            <span> {state.currency1}</span> is equivalent to\n          </p>\n          <p className=\"to\">\n            {parseFloat(state.amount2)} <span>{state.currency2}</span>\n          </p>\n          <p className=\"date\">As of {date}</p>\n        </div>\n        <Currency\n          selectedOption={state.currency1}\n          rates={rates}\n          amount={state.amount1}\n          setAmount={setAmount1}\n          dispatch={updateAmount1}\n        />\n        <Currency\n          selectedOption={state.currency2}\n          rates={rates}\n          amount={state.amount2}\n          setAmount={setAmount2}\n          dispatch={updateAmount2}\n        />\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}